    Welcome! In this capter, we begin by presenting a simple sample program and explain what it dose. At the same time, we highlight some of C's basic features.
    
    A Simple Example of C
    Let's take a look at a simple C program. This program, shown in Listing 2.1, serves to point out some of the basic features of programing in C. Before you read the upcoming line-by-line explanation of the program, read through Listing 2.1 to see whether you can figure out for yourself what it will do.
    
    Listing 2.1.  The first.c Program
    #include <stdio.h>
int main(void)
{
int num;
num = 1;    /* a simple program*/
            /* define a variable called num */
            /* assign a value to num*/
printf("I am a simple "); /* use the printf() function*/
printf("computer.\n");
printf("My favorite number is %d because it is first.\n",num);
return 0;
}

    If you think this program will print something on your screen, you are right! Exactly what will be printed might not be apparent, so run the program and see the results. First, use your favorite editor(or your complier's favorate editor) to create a file containing the text from Listing 2.1. Give the file a name that ends in .C and that satisfies your local system's name requirements. You can use first.c, for example. Now complie and rum the program. If all went well, the output should look like the following:
    I am a simple computer.
    My favorite number is 1 because it is first.
    All in all, this result is not too surprising, but what happened to the \ns and the %d in the program? And some of the lines in the program do look strange. It is time for an explanation.
    
    The Example Explained
    We'll take two passes through the program's source code. The fist pass ("Pass 1: Quick Synopsis") highlights the meaning of each line to help you get a general feel for what is going on. The second pass ("Pass 2: Program Details") explores specific implications and details to help you gain a deeper understanding.
    Figure 2.1 summarizes the parts of a C program; it includes more elements than our first example uses.
    Pass 1: Quick Synopsis
    This section presents each line from the program followed by a short description; the next section(Pass 2) explores the topics raised here more fully.
    #include <stdio.h>          <<<<<      include another file
    This line tells the compiler to include the information found in the file stdio.h, which is a standard part of all C compiler packages; this file provides support for keyboard input and for displaying output.
    int main(void)            <<<<<      a function name
    C programs consist of one or more function, the basic modules of a C program. This program consists of one function called main. The parentheses identify main() as a function name. The int indicates that the main() function returns an integer, and the void indicates that main() doesn't take any arguments. Theses are matters we'll go into later. Right now, just accept both int and void as part of the standard ISO/ANSI C way for defining main().
    /* a simple program */    <<<<<    a comment
    The symbols /* and */ enclose comments, remarks that help clarify a program. They are intended for the reader only and are ignored by ht compiler.
    {       <<<<<  beginning of the body of the function
    This opening brace marks the start of the statements that make up the function. The function definition is ended with a closeing brase (}).
    int num;       <<<<<     a declaration statement
    This statement announces that you are using a variable called num and that num will be an int(integer) type.
    num = 1;       <<<<<     an assignment statement
    The statement num = 1; assigns the value 1 to the variable called num.
    printf("I am a simple");     <<<<<     a function call statement
    Here printf() is art of the standard C library. It's termed a function, and using a function in the program is termed calling a function.
    printf("computer.\n");       <<<<<     another function call statement
    The next call to the printf() function tacks on computer to the end of the last phrase printed. The \n is code telling the computer to start a new line-that is, to move the cursor to the beginning of the next line.
    printf("My favorite number is %d because it is first.\n", num);
    The last use of printf() prints the value of num(which is 1) embedded in the phrase in quotes. The %d instructs the computer where and in what form to print the value of num.
    return 0;                     <<<<<     a return statement
    A C function can furnish or return, a number to the agency that used it. For the present, just regard this line as part of the ISO/ANSI C requirement for a properly written main() function.
    }           <<<<<     the end
    As promised, the program ends with a closing brace.
    
    Pass 2: Program Details
    Now that you have an overview of Listing 2.1, we'll take a closer look. Once again, we'll examine the individual lines from the program, this time using each line of code as a starting point for going into the details behind the code and as basis for developing a more general perspective of C programming features.
    #include     Directives and Header Files
    #include <stdio.h>
    This is the line that begins the program. The effect of #include <stdio.h> is the same as if you had typed the entire contents of stdio.h file into your file at the point where the #include line appears. In effect, it's a cut-and-paster operation. include files provide a convenient way to share information that is common to many programs.
    The #include statement is an example of a C preprocessor directive. In general, C compilers perform some preparatory work on source code before compiling; this is termed preprocessing.
    The stdio.h file is supplied as part of all C compiler packages. It contains information about input and output functions, such as printf(), for the compiler to use. The name stands for standard input/output header. C people call a collection of information that goes at the top of a file a header, and C implementations typically come with several header files.
    For the most part, header files contain information  used by the compiler to build the final executable program. For example, they may define constants or indicate the names of functions and how they should be used. But the actual code ofr a function is in a library file of precompiled code, not in a header file. The linker component of the compiler taks care of finding the library code you need. In short, header files help guide the compiler in putting your program together correctly.
    ISO/ANSI C has standardized which header files must be supplied. Some programs need to include stdio.h, and some don't. The documentation for a particular C implementation should include a description of the function in the C library. These function descriptions indentify which header files are needed. For example, the description for printf() says to use stdio.h. Omittiong the proper header file might not affect a particular program, but it is best not to rely on that. Each time this book uses library functions, it will use the include files specified by the ISO/ANSI standard for those functions.
    Why Input and Output Are Not Built In
    Pherhaps you are wondering why something as basic as input and output information isn't included automatically. One answer is that not all programs use this I/O pachage, and part of the C philosophy is to avoid carrying unnecessary weight. This principle of economic use of resources makes C popular for embedded programming- for example, writting code for a chip that controls an automotive fuel system. Incidentally the #include line is not even a C language statement! The # symbol in column 1 identifies the line as one to be handled by the c preprocessor before the compiler takes over. You will encounter more examples of preprocessor instructions later, and Chapter 16, "The C Preprocessor and the C Library," discusses this topic more fully.